
function 더하기(a,b,c){
    console.log(a+b+c)
}

더하기(1,2,3)
//만약 arr 형식인데 넣으려면 ? a=[1,2,3]
var a=[1,2,3];
// 이렇게 하면 귀찮음
더하기(a[0],a[1],a[2])
// 예전방식
더하기.apply(undefined,a)
// 요즘방식
더하기(...a)

var b = [1,2]
더하기(...b,2) 
// 인덱스가 모자르면 NaN , 로 추가 가능 함, 만약넘치면 갯수만큼 쓰고 뒤 짜름

var person = { 
    인사 : function(){
        console.log(this.name + "안녕")
    },
    인사2 : function(a, b){
        console.log(this.name + " 안녕, 받은 값: " + a + ", " + b);
    }
}

var person2 = { 
    name : '김지수'
}
person.인사()
person.인사.apply(person2)

////////////////////////
// call 과 차이점

person.인사2.apply(person2,[1,2])
person.인사2.call(person2,1,2)
// 참고 : 이 함수의 구문은 거의 call() 구문과 유사합니다.
// 근본적인 차이점은 call() 은 함수에 전달될 인수 리스트를 받는데 비해, 
// apply() 는 인수들의 단일 배열을 받는다는 점입니다.


function 소개(name, age) {
    console.log(`안녕하세요! 저는 ${name}이고, ${age}살입니다.`);
}

소개.apply(null, ["김지수", 30]);
// 출력: 안녕하세요! 저는 김지수이고, 30살입니다.
👉 apply()는 두 번째 인자로 배열을 받는다.
👉 null을 넣으면 기본적으로 this는 window(브라우저 환경)나 global(Node.js 환경)이 된다.


const person1 = {
    name: "지수",
    소개: function(age) {
        console.log(`저는 ${this.name}, 나이는 ${age}살입니다.`);
    }
};

const person2 = { name: "민수" };

person1.소개.apply(person2, [25]);
// 출력: 저는 민수, 나이는 25살입니다.

const numbers = [3, 7, 2, 9, 4];

const maxNum = Math.max.apply(null, numbers);
console.log(maxNum);  // 출력: 9

const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6];

arr1.push.apply(arr1, arr2);
console.log(arr1);  // 출력: [1, 2, 3, 4, 5, 6]
///////////////////////
ES6에서는 아래로 많이씀 

const merged = [...arr1, ...arr2];
console.log(merged); // [1, 2, 3, 4, 5, 6]


🚀 정리
apply(thisArg, [arg1, arg2, ...]) 형식으로 사용
this를 변경할 때 유용
배열을 함수의 개별 인자로 전달할 때 활용
Math.max(), push(), concat() 등의 함수와 조합 가능
ES6+에서는 ...(spread 연산자)를 대체로 사용
