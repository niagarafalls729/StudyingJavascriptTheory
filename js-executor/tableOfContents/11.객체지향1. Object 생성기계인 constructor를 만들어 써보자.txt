ES6 기준 constructor 개념 정리
1️⃣ 기존의 생성자 함수 (ES5)
사용자가 new 키워드를 사용하여 객체를 생성할 수 있도록 돕는 함수

function 기계(이름) {
  this.name = 이름;
  this.age = 15;
  this.sayHi = function() {
    console.log('안녕하세요 ' + this.name + ' 입니다');
  };
}
var 학생1 = new 기계('Park');
var 학생2 = new 기계('Kim');

console.log(학생1);  // { name: 'Park', age: 15, sayHi: [Function] }
console.log(학생2);  // { name: 'Kim', age: 15, sayHi: [Function] }


✅ new 기계('Park')를 호출하면 this가 기계 함수의 새로운 객체가 되어 학생1에 할당.

⚠️ 문제점

sayHi() 같은 메서드가 학생1, 학생2마다 개별적으로 생성됨 → 메모리 낭비
이를 해결하려면 prototype을 활용해야 했음



2️⃣ ES6 class 문법으로 변환
ES6부터는 class 키워드를 이용해 더 직관적인 문법으로 constructor를 사용할 수 있습니다.


class 기계 {
  constructor(이름) {
    this.name = 이름;
    this.age = 15;
  }

  sayHi() {
    console.log(`안녕하세요 ${this.name} 입니다`);
  }

}

const 학생1 = new 기계('Park');
const 학생2 = new 기계('Kim');

console.log(학생1);  // 기계 { name: 'Park', age: 15 }
console.log(학생2);  // 기계 { name: 'Kim', age: 15 }
학생1.sayHi();



console.log(학생1);  // 기계 { name: 'Park', age: 15 }
console.log(학생2);  // 기계 { name: 'Kim', age: 15 }

🚀 class 문법의 특징
✅ constructor(이름) 내부에서 객체 초기화 (this.name = 이름;)
✅ 메서드 (sayHi())는 prototype에 저장되어 중복 생성 방지
✅ new 키워드를 사용하여 객체 생성 가능
