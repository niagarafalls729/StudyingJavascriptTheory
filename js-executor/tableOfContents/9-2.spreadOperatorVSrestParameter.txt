🔹 ...args, Rest Parameter, Spread Operator — 같은 개념인가?
이 세 가지(...args, Rest Parameter, Spread Operator)는 모양은 비슷하지만 역할이 다름!
✅ ...(점 세 개, 전개 연산자)는 Rest Parameter와 Spread Operator에서 공통적으로 사용되지만, 쓰임새가 다름

✅ 1. Rest Parameter (...args)
📌 "남은 값들을 배열로 모아주는 역할"

함수의 매개변수에서 사용됨
여러 개의 인자를 배열 형태로 한 번에 받을 때 활용


function sum(...args) {
    console.log(args); // [1, 2, 3, 4]
    return args.reduce((acc, cur) => acc + cur, 0);
}

console.log(sum(1, 2, 3, 4)); // 10

✅ Rest Parameter 특징
✔ 함수 매개변수에서만 사용 가능
✔ 전달된 값들을 배열로 모음
✔ 매개변수의 개수가 정해지지 않았을 때 유용


✅ 2. Spread Operator (...)
📌 "배열·객체의 요소를 펼쳐서 개별 요소로 변환"

배열, 객체, 함수 호출 시 값을 개별 요소로 확장하는 역할

🔹 (1) 배열에서 Spread 사용 
const numbers = [1, 2, 3];
console.log(...numbers); // 1 2 3 (배열을 개별 요소로 펼침)

const newNumbers = [...numbers, 4, 5];
console.log(newNumbers); // [1, 2, 3, 4, 5]

🔹 (2) 객체에서 Spread 사용
const person = { name: "John", age: 30 };
const newPerson = { ...person, gender: "male" };

console.log(newPerson); 
// { name: "John", age: 30, gender: "male" } (객체 확장)

🔹 (3) 함수 호출 시 Spread 사용 
function multiply(a, b, c) {
    return a * b * c;
}

const values = [2, 3, 4];
console.log(multiply(...values)); // 24 (배열을 개별 인자로 전달)

✅ Spread Operator 특징
✔ 배열/객체/함수 호출에서 사용 가능
✔ 값을 개별 요소로 펼쳐서 전달
✔ 기존 데이터 변경 없이 새로운 배열/객체 생성 가능

✅ 3. Rest Parameter vs Spread Operator 차이점


개념	                    역할	                           사용 위치	                예제
Rest Parameter (...args)	전달받은 인자를 배열로 모음	         함수 매개변수에서 사용	        function sum(...args) {}
Spread Operator (...)	    배열/객체의 요소를 펼침	             배열, 객체, 함수 호출에서 사용	[...arr], {...obj}, func(...arr)

✅ 결론: ...args는 Rest Parameter의 예제일 뿐!
✔ ...args → Rest Parameter를 사용할 때 args라는 이름을 붙인 것 (사용자 정의 이름)
✔ Rest Parameter(...)와 Spread Operator(...)는 서로 반대 역할

Rest: "여러 개의 값을 하나의 배열로 모음"
Spread: "배열/객체를 개별 요소로 펼침"

👉 즉, ...args는 Rest Parameter의 예제 중 하나일 뿐이고, Rest와 Spread는 역할이 다르다! 🚀

✅ 한 문장으로 정리하면?
"...args는 Rest Parameter의 예제이고, Rest Parameter(...)는 값을 배열로 모으는 역할, Spread Operator(...)는 배열·객체를 개별 요소로 펼치는 역할을 한다."
 







