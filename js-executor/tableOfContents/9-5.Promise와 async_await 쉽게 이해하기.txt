1. Promise
Promise는 비동기 작업의 완료 또는 실패를 처리하는 객체입니다. 비동기 작업이 완료되면 .then() 또는 .catch()로 결과를 처리합니다.

예제: Promise 
// 비동기 함수 반환하는 Promise 예제
function fetchData() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const success = true; // 성공 여부
      if (success) {
        resolve("데이터가 성공적으로 로드되었습니다!");
      } else {
        reject("데이터 로드 실패!");
      }
    }, 2000);
  });
}

// Promise 사용
fetchData()
  .then(result => {
    console.log(result); // 성공 시 결과 출력
  })
  .catch(error => {
    console.log(error); // 실패 시 에러 출력
  });
설명:

fetchData() 함수는 Promise 객체를 반환합니다.
setTimeout을 이용해 2초 후에 작업이 완료되며, 성공 시 resolve()를 호출하고, 실패 시 reject()를 호출합니다.
then()은 성공적인 결과를 처리하고, catch()는 실패를 처리합니다.



2. async/await
async와 await는 Promise를 보다 직관적으로 사용할 수 있게 해주는 문법입니다.

async 함수는 항상 Promise를 반환합니다.
await는 Promise가 완료될 때까지 기다리고, 그 결과를 반환합니다.
예제: async/await 

// async/await 사용 예제
async function fetchData() {
  const success = true; // 성공 여부
  if (success) {
    return "데이터가 성공적으로 로드되었습니다!";
  } else {
    throw "데이터 로드 실패!";
  }
}

// async/await 사용
async function getData() {
  try {
    const result = await fetchData();
    console.log(result); // 성공 시 결과 출력
  } catch (error) {
    console.log(error); // 실패 시 에러 출력
  }
}

getData();
설명:
fetchData() 함수는 async 함수로, Promise를 반환하는 함수입니다.
await는 fetchData()가 완료될 때까지 기다리고, 결과를 받아옵니다.
try...catch 블록을 사용해 에러를 처리합니다.

차이점 정리
Promise: .then()과 .catch()를 사용하여 비동기 작업의 성공과 실패를 처리합니다.

async/await: 비동기 작업을 동기 방식처럼 처리할 수 있게 해주는 문법으로, await로 Promise의 완료를 기다리고, async 함수로 이를 반환합니다.

두 방식은 비동기 코드를 처리하는 방식은 다르지만, 결국 Promise를 사용한다는 점에서 같은 원리를 따릅니다.

 

 