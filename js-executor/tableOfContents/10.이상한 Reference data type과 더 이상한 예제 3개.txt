 

📌 JavaScript의 Primitive Type과 Reference Type
JavaScript에서는 데이터 타입이 크게 두 가지로 나뉩니다.
1️⃣ 원시 타입(Primitive Type)
2️⃣ 참조 타입(Reference Type)

✅ Primitive Type (원시 타입)
👉 값 자체를 저장하며, 메모리에 직접 저장되는 타입입니다.
👉 원시 타입 변수는 값을 복사하여 전달합니다.

✔ 대표적인 원시 타입
타입	    예시
string	    'Hello', "World"
number	    123, 3.14
boolean	    true, false
undefined	let x; (값이 할당되지 않음)
null	    let y = null; (의도적으로 빈 값)
symbol  	Symbol('id') (고유한 값)
bigint	    12345678901234567890n (큰 정수)


var 이름1 = 'kim';
var 이름2 = 이름1; // 'kim' 값이 복사됨 (새로운 메모리 공간 할당)

console.log(이름1); // 'kim'
console.log(이름2); // 'kim'

이름1 = 'park'; // 이름1만 변경됨
console.log(이름1); // 'park'
console.log(이름2); // 'kim' (변하지 않음)


✅ Reference Type (참조 타입)
👉 값이 아닌 참조(주소)를 저장하는 타입입니다.
👉 객체(Object), 배열(Array), 함수(Function) 등이 이에 해당합니다.
👉 변수에 할당할 때 메모리 주소(Reference)를 복사하므로, 원본 데이터가 변경되면 복사한 곳에서도 변경됩니다.


✔ 대표적인 참조 타입
타입	    예시
Object	    { name: 'Kim' }
Array	    [1, 2, 3]
Function	function foo() {}

var 오브젝트1 = { name: 'kim' };
var 오브젝트2 = 오브젝트1; // 메모리 주소(Reference)를 복사

console.log(JSON.stringify(오브젝트1)); // {"name":"kim"}
console.log(JSON.stringify(오브젝트2)); // {"name":"kim"}

오브젝트1.name = 'park'; // 원본 객체 변경

console.log(JSON.stringify(오브젝트1)); // {"name":"park"}
console.log(JSON.stringify(오브젝트2)); // {"name":"park"} (같이 변경됨)


🎯 Primitive vs Reference 차이 정리
               원시 타입 (Primitive)	        참조 타입 (Reference)
저장 방식	    값 자체를 저장	                 메모리 주소(Reference)를 저장
변수 복사 시	값이 복사됨 (독립적)	          주소가 복사됨 (같은 데이터 참조)
데이터 변경 시	원본과 복사본이 서로 영향 없음	   원본 변경 시, 복사본도 변경됨
예시	       let a = 'hello'; let b = a;	     et obj1 = {x: 1}; let obj2 = obj1;

🛠 해결 방법: 객체를 복사할 때 새로운 메모리 할당하기
객체를 복사하면서 원본을 변경해도 영향을 받지 않도록 하려면 얕은 복사(Shallow Copy) 또는 깊은 복사(Deep Copy) 를 사용할 수 있습니다.


📌 1. 얕은 복사 (Shallow Copy) 
var 오브젝트1 = { name: 'kim' };
var 오브젝트2 = { ...오브젝트1 }; // 새로운 객체 생성 (spread 연산자)

오브젝트1.name = 'park';

console.log(JSON.stringify(오브젝트1)); // {"name":"park"}
console.log(JSON.stringify(오브젝트2)); // {"name":"kim"} (독립적인 객체)


📌 2. 깊은 복사 (Deep Copy) 
var 오브젝트1 = { name: 'kim', nested: { age: 20 } };
var 오브젝트2 = JSON.parse(JSON.stringify(오브젝트1)); // 깊은 복사

오브젝트1.nested.age = 30;

console.log(오브젝트1.nested.age); // 30
console.log(오브젝트2.nested.age); // 20 (완전히 분리됨)

✅ 중첩된 객체까지 복사하려면 JSON.parse(JSON.stringify(obj))을 사용해야 함.


💡 정리
Primitive Type: 값 자체를 저장 → 변수 복사 시 독립적
Reference Type: 주소를 저장 → 변수 복사 시 같은 객체 참조
객체를 복사할 때는 얕은 복사(Spread 연산자) 또는 깊은 복사(JSON 방식) 활용
🔥 이 개념을 이해하면 JS에서 데이터 관리가 훨씬 쉬워집니다! 😊


----------------------
쉬운말로 이미 알던 개념인데 ..


일단 단순한 값 원시 데이터는 primitive type 
obj arr 객체는 reference 란거로 진행



